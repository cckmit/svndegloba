<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">
           
           
	<!-- CONFIGURACIO 1 : -->
	<!-- 
	<security:http auto-config="true" use-expressions="true">
		<security:form-login login-page="/app/login" login-processing-url="/app/j_spring_security_check" 
			default-target-url="/app/home" authentication-failure-url="/app/login?login_error=1" />
		<security:logout logout-url="/app/logout" logout-success-url="/app/home" />
		<security:intercept-url pattern="/app/secured/appleUser" method="POST" access="hasRole('ROLE_APPLE_USER')" />
		<security:intercept-url pattern="/app/secured/androidUser" method="POST" access="hasRole('ROLE_ANDROID_USER')" />			
	</security:http>  -->
	
	
	<!-- de la web spring-travel -->
	<!--  <security:http>
        Authentication policy
        <security:form-login login-page="/users/login" login-processing-url="/users/login/authenticate" default-target-url="/hotels" authentication-failure-url="/users/login?login_error=1"/>
        <security:logout logout-url="/users/logout" logout-success-url="/users/logoutSuccess"/>
    </security:http>
 -->

	<!--
		Define local authentication provider, a real app would use an external provider (JDBC, LDAP, CAS, etc)
		
		usernames/passwords are:
			joe/joe1
			pete/pete1
	-->
	<!-- <security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="md5" />
			<security:user-service>
				<security:user name="joe" password="bf403351dfb2ae819874163aff25a49c" 
					authorities="ROLE_USER, ROLE_APPLE_USER" />
				<security:user name="pete" password="5d2ea1f70185e4357183bb9c00187219" 
					authorities="ROLE_USER, ROLE_ANDROID_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>	
 -->


	<!-- de la web spring-travel -->
   <!--  <security:authentication-manager>
        <security:authentication-provider>
            <security:password-encoder hash="md5"/>
            <security:user-service>
                <security:user name="keith" password="417c7382b16c395bc25b5da1398cf076" authorities="ROLE_USER, ROLE_SUPERVISOR"/>
                <security:user name="erwin" password="12430911a8af075c6f41c6976af22b09" authorities="ROLE_USER, ROLE_SUPERVISOR"/>
                <security:user name="jeremy" password="57c6cbff0d421449be820763f03139eb" authorities="ROLE_USER"/>
                <security:user name="scott" password="942f2339bf50796de535a384f0d1af3e" authorities="ROLE_USER"/>
                <security:user name="josh" password="c9089f3c9adaf0186f6ffb1ee8d6501c" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
 -->


<!-- CONFIGURACIO 2 :  Integrar el login de Google a la App con OAuth2 y Spring Security -->
<!-- ************************************************************************************ -->
<!--  http://www.adictosaltrabajo.com/tutoriales/spring-security-o-auth-google/ 
529425111572-7d84aa90nt1b89sdrjt1ceq1dckjek97.apps.googleusercontent.com *****************-->
<!-- ************************************************************************************ -->

	<bean id="google2ProviderForWebClient" class="org.scribe.up.provider.impl.Google2Provider">
<!--         <property name="key" value="529425111572-7d84aa90nt1b89sdrjt1ceq1dckjek97.apps.googleusercontent.com"/>  -->  <!--  {pon aqui el Client ID creado en la consola de Google API (en el punto 1)} -->
        <property name="key" value="910109996901-910v5uqubvse82fu2vqrblck9nhnhocb.apps.googleusercontent.com"/> 
        <!-- <property name="secret" value="BupeTdv74Z2MoZqb3_SZktrx"/>   --> <!-- {secret Key de la consola de Google API}"  santasusanap -->
        <property name="secret" value="p1Fc6moFKqvD-XSU9J4U04tS"/>   <!-- {secret Key de la consola de Google API}"  degloba -->
        <property name="scope" value="EMAIL_AND_PROFILE"/>
    </bean>
 
    <bean id="providersDefinition" class="org.scribe.up.provider.ProvidersDefinition">
        <property name="baseUrl" value="http://localhost:8888/app/oauth/j_spring_oauth_security_check" />
        <property name="providers">
            <list>
                <ref bean="google2ProviderForWebClient" />
            </list>
        </property>
    </bean>
 
    <bean id="oAuthProvider" class="com.github.leleuj.ss.oauth.client.authentication.OAuthAuthenticationProvider">
        <property name="providersDefinition" ref="providersDefinition" />
    </bean>
 
    <bean id="google2EntryPoint" class="com.github.leleuj.ss.oauth.client.web.OAuthAuthenticationEntryPoint">
        <property name="provider" ref="google2ProviderForWebClient" />
    </bean>
 
    
    <bean id="oAuthFilter" class="com.github.leleuj.ss.oauth.client.web.OAuthAuthenticationFilter">
        <property name="providersDefinition" ref="providersDefinition" />
        <property name="authenticationManager" ref="authenticationManagerOauth" />
    </bean>
    
	<security:authentication-manager alias="authenticationManagerOauth">
        <security:authentication-provider ref="oAuthProvider"/>
    </security:authentication-manager>
                
	<security:http  pattern="/app/oauth/**" entry-point-ref="google2EntryPoint">
		<security:custom-filter after="CAS_FILTER" ref="oAuthFilter" />		
        <security:intercept-url pattern="/app/oauth/userHome" access="IS_AUTHENTICATED_FULLY" />
        <security:intercept-url pattern="/app/oauth/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:logout />
    </security:http> 



<!-- *******************************************************************
**   Spring Security in Google App Engine   *************************
http://spring.io/blog/2010/08/02/spring-security-in-google-app-engine 
************************************************************************ -->


	<security:http pattern="/app/gae/**" use-expressions="true" entry-point-ref="gaeEntryPoint">
        <security:intercept-url pattern="/app/gae" access="permitAll" />
        <security:intercept-url pattern="/app/gae/register.htm*" access="hasRole('NEW_USER')" />
        <security:intercept-url pattern="/app/gae/**" access="hasRole('USER')" />
        <security:custom-filter position="PRE_AUTH_FILTER" ref="gaeFilter" />
    </security:http>
    
    <bean id="gaeEntryPoint" class="com.degloba.security.spring.gae.security.GoogleAccountsAuthenticationEntryPoint" />

    <bean id="gaeFilter" class="com.degloba.security.spring.gae.security.GaeAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManagerGoogle"/>
        <property name="failureHandler">
			<bean class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
				<property name="exceptionMappings">
					<map>
						<entry key="org.springframework.security.authentication.DisabledException" value="/disabled.htm" />
					</map>
				</property>
			</bean>
		</property>
    </bean>

    <security:authentication-manager alias="authenticationManagerGoogle">
        <security:authentication-provider ref="gaeAuthenticationProvider"/>
    </security:authentication-manager>

    <bean id="gaeAuthenticationProvider" class="com.degloba.security.spring.gae.security.GoogleAccountsAuthenticationProvider">
        <property name="userRegistry" ref="userRegistry" />
    </bean> 

    <bean id="userRegistry" class="com.degloba.security.spring.gae.users.GaeDatastoreUserRegistry" />
 

	
	
	<!-- ***** -->
	<!--  SAML -->
	<!-- ***** -->
	
	 <!--  <import resource="security-saml.xml"/>   -->
	
	<!-- In order to install artifact resolution using GAE specific APIs -->
<!-- 	<bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
	    <constructor-arg ref="parserPool"/>
	    <constructor-arg ref="velocityEngine"/>
	    <constructor-arg>
	        <bean class="com.degloba.security.spring.saml.websso.google.ArtifactResolutionProfileGAE">
	            <property name="processor">
	                <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
	                    <constructor-arg ref="soapBinding"/>
	                </bean>
	            </property>
	        </bean>
	    </constructor-arg>
	</bean>


	 In order to use metadata loading without reloading threads add a provider to your metadata bean with: 
	<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	    <constructor-arg>
	        <bean class="com.degloba.security.spring.saml.metadata.provider.StaticFilesystemMetadataProvider">
	            <constructor-arg>
	                <value type="java.io.File">classpath:metadata/idp.xml</value>
	            </constructor-arg>
	            <property name="parserPool" ref="parserPool"/>
	        </bean>
	    </constructor-arg>
	    <constructor-arg>
	        <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
	        </bean> 
	       
	    </constructor-arg> 
	    	    
	</bean>

	<bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
	    <constructor-arg>
	        <list>
	            Example of classpath metadata with Extended Metadata
                <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <constructor-arg>
                        <bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
                            <constructor-arg>
                                <bean class="java.util.Timer"/>
                            </constructor-arg>
                            <constructor-arg>
                                <bean class="org.opensaml.util.resource.ClasspathResource">
                                    <constructor-arg value="/metadata/idp.xml"/>
                                </bean>
                            </constructor-arg>
                            <property name="parserPool" ref="parserPool"/>
                        </bean>
                    </constructor-arg>
                    <constructor-arg>
                        <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                        </bean>
                    </constructor-arg>
                </bean>
                Example of HTTP metadata without Extended Metadata
                <bean class="org.opensaml.saml2.metadata.provider.HTTPMetadataProvider">
                    URL containing the metadata
                    <constructor-arg>
                        <value type="java.lang.String">http://idp.ssocircle.com/idp-meta.xml</value>
                    </constructor-arg>
                    Timeout for metadata loading in ms
                    <constructor-arg>
                        <value type="int">15000</value>
                    </constructor-arg>
                    <property name="parserPool" ref="parserPool"/>
                </bean>
                Example of file system metadata without Extended Metadata
                
                <bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                    <constructor-arg>
                        <value type="java.io.File">/usr/local/metadata/idp.xml</value>
                    </constructor-arg>
                    <property name="parserPool" ref="parserPool"/>
                </bean>
               
	        </list>
	    </constructor-arg>
	    <property name="refreshCheckInterval" value="0"/>
</bean>
	 -->
	
	
	<!-- ********************************************************************* -->
	<!-- 					spring-security-pac4j                              -->
	<!-- ********************************************************************* -->
	
<!-- <security:authentication-manager alias="authenticationManager">
	<security:authentication-provider ref="clientProvider" />
</security:authentication-manager>
	
<bean id="facebookClient" class="org.pac4j.oauth.client.FacebookClient">
    <property name="key" value="fbKey" />
    <property name="secret" value="fbSecret" />
</bean>

<bean id="twitterClient" class="org.pac4j.oauth.client.TwitterClient">
    <property name="key" value="twKey" />
    <property name="secret" value="twSecret" />
</bean>

<bean id="usernamePasswordAuthenticator" class="org.pac4j.http.credentials.authenticator.test.SimpleTestUsernamePasswordAuthenticator" />

<bean id="formClient" class="org.pac4j.http.client.indirect.FormClient">
    <property name="loginUrl" value="http://localhost:8080/loginForm.jsp" />
    <property name="authenticator" ref="usernamePasswordAuthenticator" />
</bean>

<bean id="clientFilter" class="org.pac4j.springframework.security.web.ClientAuthenticationFilter">
    <property name="clients" ref="clients" />
    <property name="authenticationManager" ref="authenticationManager" />
</bean>

<bean id="clientProvider" class="org.pac4j.springframework.security.authentication.ClientAuthenticationProvider">
    <property name="clients" ref="clients" />
</bean>


<bean id="casClient" class="org.pac4j.cas.client.CasClient">
    <property name="casLoginUrl" value="http://mycasserverurl" />
</bean>

<bean id="clients" class="org.pac4j.core.client.Clients">
    <property name="callbackUrl" value="http://localhost:8080/callback" />
    <property name="clients">
        <list>
            <ref bean="facebookClient" />
            <ref bean="twitterClient" />
            <ref bean="formClient" />
            <ref bean="casClient" />
        </list>
    </property>
</bean>

<security:http pattern="/facebook/**" entry-point-ref="facebookEntryPoint">
    <security:intercept-url pattern="/facebook/**" access="isAuthenticated()" />
</security:http>
<security:http pattern="/twitter/**" entry-point-ref="twitterEntryPoint">
    <security:intercept-url pattern="/twitter/**" access="isAuthenticated()" />
</security:http> -->

<!-- <security:http pattern="/**" entry-point-ref="casEntryPoint">
    <security:csrf disabled="true"/>
    <security:headers disabled="true" />
    <security:custom-filter after="CAS_FILTER" ref="clientFilter" />
    <security:intercept-url pattern="/cas/**" access="isAuthenticated()" />
    <security:intercept-url pattern="/**" access="permitAll()" />
    <security:logout logout-success-url="/" />
</security:http> 

<bean id="facebookEntryPoint" class="org.pac4j.springframework.security.web.ClientAuthenticationEntryPoint">
    <property name="client" ref="facebookClient" />
</bean>
<bean id="twitterEntryPoint" class="org.pac4j.springframework.security.web.ClientAuthenticationEntryPoint">
    <property name="client" ref="twitterClient" />
</bean>

<bean id="casEntryPoint" class="org.pac4j.springframework.security.web.ClientAuthenticationEntryPoint">
    <property name="client" ref="casClient" />
</bean> -->
	
	
</beans>