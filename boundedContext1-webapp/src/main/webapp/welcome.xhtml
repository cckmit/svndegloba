<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
   xmlns:f="http://java.sun.com/jsf/core"
   xmlns:h="http://java.sun.com/jsf/html"
   xmlns:ui="http://java.sun.com/jsf/facelets"
   xmlns:p="http://primefaces.org/ui"
   xmlns:degloba="http://java.sun.com/jsf/composite/degloba">
   
   
   <h:head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>Welcome to JSF 2.1 on the Google AppEngine!</title>
      
		<!-- Firebase -->
  		<!-- ***********************************************************************************************************************
       	* TODO(DEVELOPER): Paste the initialization snippet from: Firebase Console > Overview > Add Firebase to your web app. *
       	*********************************************************************************************************************** -->
	<script src="https://www.gstatic.com/firebasejs/3.2.0/firebase.js"></script>
	<script>
	  // Initialize Firebase
	  var config = {
	    apiKey: "AIzaSyDuTo74D7zmb6vO6bOV5Z1h7IABIEBM0hM",
	    authDomain: "wwwdegloba-1350.firebaseapp.com",
	    databaseURL: "https://wwwdegloba-1350.firebaseio.com",
	    storageBucket: "wwwdegloba-1350.appspot.com",
	  };
	  firebase.initializeApp(config);


	  

       $(function() {
           $('#p1').puipassword();
        
           $('#p2').puipassword({inline:true}); 
       });
       </script>
      
      
      
      <!-- PRIMEFACEUI (http://www.primefaces.org/primeui/#setup) -->

	<link rel="stylesheet" href="/resources/primefaces/themes/afterwork/theme.css" />
    <link rel="stylesheet" type="text/css" href="/resources/primefaces/font-awesome-4.6.3/css/font-awesome.css" />
    <link rel="stylesheet" href="/resources/primefaces/jquery-ui-1.12.0/jquery-ui.css" />
    <link rel="stylesheet" href="/resources/primefaces/primeui.min.css" />
    <script type="text/javascript" src="/resources/primefaces/jquery-3.1.0.js"></script>
    <script type="text/javascript" src="/resources/primefaces/jquery-ui-1.12.0/jquery-ui.js"></script>
    <script type="text/javascript" src="/resources/primefaces/primeui.min.js"></script>
      
 
   <script type="text/javascript">


  /**
   * Handles the sign in button press.
   */
  function toggleSignInEmail() {
	
    if (firebase.auth().currentUser) {
      // [START signout]
      firebase.auth().signOut();
      // [END signout]
    } else {
      var email = document.getElementById('email').value;
      var password = document.getElementById('password').value;
      
      // Sign in with email and pass.
      // [START authwithemail]
      firebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        // [START_EXCLUDE]
        if (errorCode === 'auth/wrong-password') {
          alert('Wrong password.');
        } else {
          alert(errorMessage);
        }
        console.log(error);
        document.getElementById('quickstart-sign-in').disabled = false;
        // [END_EXCLUDE]
      });
      // [END authwithemail]
    }
    document.getElementById('quickstart-sign-in').disabled = true;
  }

  /**
   * Handles the sign up button press.
   */
  function handleSignUp() {

    var email = document.getElementById('j_idt10:j_idt68:emailSignup').value;
    var password = document.getElementById('j_idt10:j_idt68:passwordSignup').value;

    alert(email + " " + password);
    
    // Sign in with email and pass.
    // [START createwithemail]
    firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {
      // Handle Errors here.
      var errorCode = error.code;
      var errorMessage = error.message;
      // [START_EXCLUDE]
      if (errorCode == 'auth/weak-password') {
        alert('The password is too weak.');
      } else {
        alert(errorMessage);
      }
      console.log(error);
      // [END_EXCLUDE]
    });
    // [END createwithemail]
  }
  /**
   * Sends an email verification to the user.
   */
  function sendEmailVerification() {
    // [START sendemailverification]
    firebase.auth().currentUser.sendEmailVerification().then(function() {
      // Email Verification sent!
      // [START_EXCLUDE]
      alert('Email Verification Sent!');
      // [END_EXCLUDE]
    });
    // [END sendemailverification]
  }
  function sendPasswordReset() {
    var email = document.getElementById('email').value;
    // [START sendpasswordemail]
    firebase.auth().sendPasswordResetEmail(email).then(function() {
      // Password Reset Email Sent!
      // [START_EXCLUDE]
      alert('Password Reset Email Sent!');
      // [END_EXCLUDE]
    }).catch(function(error) {
      // Handle Errors here.
      var errorCode = error.code;
      var errorMessage = error.message;
      // [START_EXCLUDE]
      if (errorCode == 'auth/invalid-email') {
        alert(errorMessage);
      } else if (errorCode == 'auth/user-not-found') {
        alert(errorMessage);
      }
      console.log(error);
      // [END_EXCLUDE]
    });
    // [END sendpasswordemail];
  }


  
    /**
     * Function called when clicking the Login/Logout button.
     */
    // [START buttoncallback]
    function toggleSignInGoogle() {
        
      if (!firebase.auth().currentUser) {
    	  
        // [START createprovider]
        var provider = new firebase.auth.GoogleAuthProvider();
        // [END createprovider]
        // [START addscopes]
        provider.addScope('https://www.googleapis.com/auth/plus.login');
        // [END addscopes]
        // [START signin]
        firebase.auth().signInWithRedirect(provider);
        // [END signin]
      } else {

    	//alert("Google : si currentUser");
    	  
        // [START signout]
        firebase.auth().signOut();
        // [END signout]
      }
      // [START_EXCLUDE]
      //document.getElementById('sign-in-google').disabled = true;
      //document.getElementById('sign-in-twitter').disabled = true;
      // [END_EXCLUDE]
    }
    // [END buttoncallback]
    
    
    
    function toggleSignInTwitter() {
        alert("twitter");
      if (!firebase.auth().currentUser) {
        // [START createprovider]
        var provider = new firebase.auth.TwitterAuthProvider();
        // [END createprovider]
        // [START signin]
        firebase.auth().signInWithPopup(provider).then(function(result) {
          // This gives you a the Twitter OAuth 1.0 Access Token and Secret.
          // You can use these server side with your app's credentials to access the Twitter API.
          var token = result.credential.accessToken;
          var secret = result.credential.secret;
          // The signed-in user info.
          var user = result.user;
          // [START_EXCLUDE]
          //document.getElementById('oauthtoken').textContent = token;
          //document.getElementById('oauthsecret').textContent = secret;
          // [END_EXCLUDE]
        }).catch(function(error) {
          // Handle Errors here.
          var errorCode = error.code;
          var errorMessage = error.message;
          // The email of the user's account used.
          var email = error.email;
          // The firebase.auth.AuthCredential type that was used.
          var credential = error.credential;
          // [START_EXCLUDE]
          if (errorCode === 'auth/account-exists-with-different-credential') {
            alert('You have already signed up with a different auth provider for that email.');
            // If you are using multiple auth providers on your app you should handle linking
            // the user's accounts here.
          } else {
            console.error(error);
          }
          // [END_EXCLUDE]
        });
        // [END signin]
      } else {
        // [START signout]
        firebase.auth().signOut();
        // [END signout]
      }
   // [START_EXCLUDE]
      //document.getElementById('sign-in-twitter').disabled = true;
      // [END_EXCLUDE]
    }
    // [END buttoncallback]
    
    
    /**
     * initApp handles setting up the Firebase context and registering
     * callbacks for the auth status.
     *
     * The core initialization is in firebase.App - this is the glue class
     * which stores configuration. We provide an app name here to allow
     * distinguishing multiple app instances.
     *
     * This method also registers a listener with firebase.auth().onAuthStateChanged.
     * This listener is called when the user is signed in or out, and that
     * is where we update the UI.
     *
     * When signed in, we also authenticate to the Firebase Realtime Database.
     */
    function initApp() {
      // Result from Redirect auth flow.
      // [START getidptoken]
      firebase.auth().getRedirectResult().then(function(result) {
          //alert("getRedirectResult");
          
        if (result.credential) {
          // This gives you a Google Access Token. You can use it to access the Google API.
          var token = result.credential.accessToken;
          // [START_EXCLUDE]
          //document.getElementById('oauthtoken').textContent = token;
        } else {
          //document.getElementById('oauthtoken').textContent = 'null';
          // [END_EXCLUDE]
        }
        // The signed-in user info.
        var user = result.user;
      }).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        // The email of the user's account used.
        var email = error.email;
        // The firebase.auth.AuthCredential type that was used.
        var credential = error.credential;
        // [START_EXCLUDE]
        if (errorCode === 'auth/account-exists-with-different-credential') {
          alert('You have already signed up with a different auth provider for that email.');
          // If you are using multiple auth providers on your app you should handle linking
          // the user's accounts here.
        } else {
          console.error(error);
        }
        // [END_EXCLUDE]
      });
      // [END getidptoken]
      // Listening for auth state changes.
      // [START authstatelistener]
      firebase.auth().onAuthStateChanged(function(user) {
        if (user) {
        	//alert("onAuthStateChanged : si user");
        	
          // User is signed in.
          var displayName = user.displayName;
          var email = user.email;
          var emailVerified = user.emailVerified;
          var photoURL = user.photoURL;
          var isAnonymous = user.isAnonymous;
          var uid = user.uid;
          var refreshToken = user.refreshToken;
          var providerData = user.providerData;         
          // [START_EXCLUDE]
          ////////////document.getElementById('sign-in-status').textContent = 'Signed in';

          document.getElementById('google-user').src = photoURL;
          
          // IMPORTANT !!!!
          // creem cookie per persistir
          document.cookie="uid=" + user.uid;    //????????? The user's ID, unique to the Firebase project. Do NOT use
          // this value to authenticate with your backend server, if
          // you have one. Use User.getToken() instead.
          // https://firebase.google.com/docs/auth/web/manage-users
   
			// user.providerData.forEach(function (profile) {

        		//  if (profile.providerId == "google.com") {
        			  /////////////document.getElementById('sign-in-google').textContent = 'Sign out';
        		//  } else if (profile.providerId == "twitter.com") {
        				///////////// document.getElementById('sign-in-twitter').textContent = 'Sign out';
        		//   } else if (profile.providerId == "facebook.com") {
        		//	  document.getElementById('sign-in-twitter').textContent = 'Sign out';
        		//	  alert("facebook"); 
        		//  };        		 
        	 // }); 
        	//} 
   
          
/*           document.getElementById('account-details').textContent = JSON.stringify({
            displayName: displayName,
            email: email,
            emailVerified: emailVerified,
            photoURL: photoURL,
            isAnonymous: isAnonymous,
            uid: uid,
            refreshToken: refreshToken,
            providerData: providerData
          }, null, '  '); */
          // [END_EXCLUDE]
        } else 
            {        
          // User is signed out.
          // [START_EXCLUDE]
          //document.getElementById('sign-in-status').textContent = 'Signed out';
          ///////////document.getElementById('sign-in-google').textContent = 'Sign in with Google';
          //document.getElementById('account-details').textContent = 'null';
          //document.getElementById('oauthtoken').textContent = 'null';
          // [END_EXCLUDE]
        }
        // [START_EXCLUDE]
        //document.getElementById('sign-in-google').disabled = false;
        //document.getElementById('sign-in-twitter').disabled = false;
        // [END_EXCLUDE]
      });
      // [END authstatelistener]
      //document.getElementById('sign-in-google').addEventListener('click', toggleSignInGoogle2, false);
      //document.getElementById('sign-in-twitter').addEventListener('click', toggleSignInTwitter, false);
    }
    window.onload = function() {
      initApp();
    };

    
    function handleLoginRequest(xhr, status, args) {

        alert(args.signUPType);
        
        if(args.validationFailed || !args.signUpExist) {
            PF('dlgSignup').jq.effect("shake", {times:5}, 100);
        }
        else {
            PF('dlgSignup').hide();
            $('#loginLink').fadeOut();

            toggleSignInGoogle();
        }
    }
    
  </script>
  
  </h:head>

				
   <h:body id="body">
   
      <f:view contentType="text/html">
         <p><h:outputText value="You are now up and running with JavaServer Faces 2.1 on the Google App Engine."/></p>
  
  		<h:form>
  			<input id="p1" name="p1" type="password" /> 	
		</h:form>
 
  	
	<degloba:signinSignupComponent dialegSignup="dlgSignup" dialegLogin="dlgLogin"></degloba:signinSignupComponent>     
 
	<degloba:signUpComponent dialegSignup="dlgSignup"></degloba:signUpComponent>
   
	<degloba:loginComponent dialegLogin="dlgLogin"></degloba:loginComponent>
          
	<img id="google-user" src=""  style="width: 40px;"></img>
			

	<div id="wrapper"> <!--This is the Div 1 in the picture-->
    	<div id="topBar"> <!--This is the Div 2 in the picture-->
    	    				
	        <div id="menu">
	       			
				<ui:insert name="footer" >
		    		  <ui:include src="/WEB-INF/layouts/commonHeader.xhtml" />
		    	</ui:insert>   
					    
	        </div> <!--This is the Div 5 in the picture-->
       
    	</div><!--Closing "topBar"-->

    	<div id="central"> <!--This is the Div 3 in the picture-->
        	<div id="top3"> <!--This is the Div 7 in the picture-->
        
				<ui:insert name="content" />
			
        	</div>
    	</div><!--Closing "central"-->
	    
		<div id="footer">
	    	<ui:insert name="footer" >
				<ui:include src="/WEB-INF/layouts/commonFooter.xhtml" />
	    	</ui:insert>    
		</div>
    
	</div><!--Closing "wrapper"-->	

</f:view>
</h:body>
</html>






