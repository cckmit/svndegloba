<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mongo="http://www.springframework.org/schema/data/mongo"
  xsi:schemaLocation="http://www.springframework.org/schema/data/mongo
                      https://www.springframework.org/schema/data/mongo/spring-mongo.xsd
                      http://www.springframework.org/schema/beans
                      https://www.springframework.org/schema/beans/spring-beans.xsd">
		
<!-- 	
       
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd">	 -->
		
		
		

	<!-- ******************************************** -->
	<!-- BEANS RELACIONAT AMB LA PERSISTENCIA /SPRING -->
	<!-- ******************************************** -->

	<!-- <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" 
		/> -->

	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
	<!-- the transactional semantics... -->
	<!-- <tx:attributes> -->
	<!-- all methods starting with 'get' are read-only -->
	<!-- <tx:method name="get*" read-only="true"/> other methods use the default 
		transaction settings (see below) <tx:method name="*"/> </tx:attributes> </tx:advice> -->


	<!-- ********************* -->
	<!-- EntityManagerFactoryS -->
	<!-- ********************* -->
	<!-- <bean id="entityManagerFactoryDatastore"
		class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="transactions-optional" />
	</bean>

	TransactionManagerS
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryDatastore" />
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" />
 -->


	<!-- ********************* -->
	<!-- MongoDB -->
	<!-- ********************* -->
	<!-- http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/ -->

	<!-- <mongo:mongo host="ds039960.mongolab.com" port="39960" /> -->


	<!-- Factory bean that creates the Mongo instance -->
	<!-- <bean id="mongo" class="org.springframework.data.mongodb.core.MongoFactoryBean"> 
		<property name="host" value="localhost"/> </bean> -->

	<!-- Use this post processor to translate any MongoExceptions thrown in 
		@Repository annotated classes -->
	<!--<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />-->

	<!-- Convert the given runtime exception to an appropriate exception from 
		the org.springframework.dao hierarchy -->
	<!--<bean
		class="org.springframework.data.mongodb.core.MongoExceptionTranslator" />
-->
	<!-- Mongo cross-store aspect config <bean class="org.springframework.data.mongodb.crossstore.MongoDocumentBacking" 
		factory-method="aspectOf"> <property name="changeSetPersister" ref="mongoChangeSetPersister"/> 
		</bean> <bean id="mongoChangeSetPersister" class="org.springframework.data.mongodb.crossstore.MongoChangeSetPersister"> 
		<property name="mongoTemplate" ref="mongoTemplate"/> <property name="entityManagerFactory" 
		ref="entityManagerFactory"/> </bean> -->


	<!-- A PARTIR D'AQUI ES COMENTA A PROD ********************* -->

<!-- 	<mongo:mongo-client id="mongoClient" host="localhost" />
	
	 <mongo:db-factory id="mongoDbFactory" dbname="test" mongo-client-ref="mongoClient" /> 

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> 
	    <constructor-arg ref="mongoDbFactory"/> 
	</bean>
	
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	 -->

<!-- 	<bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongo" ref="mongo" />
		<constructor-arg name="databaseName" value="casino" />
	</bean> -->

<!-- 	<bean id="topicRepository"
		class="com.degloba.messaging.infrastructure.persistence.nosql.impl.mongo.repositories.FCMTopicRepository">
		<property name="mongoTemplate" ref="mongoTemplate" />
	</bean> -->


<!-- 	<bean id="FCMTokenRegisterRepository"
		class="com.degloba.lloguers.infrastructure.persistence.nosql.impl.mongo.api.spring.repositories.usuaris.FCMTokenRegisterRepository">
		<property name="mongoTemplate" ref="mongoTemplate" />
	</bean> -->


	<!-- <bean id="eventBus" class="com.google.common.eventbus.EventBus"/> -->


<!--  	<bean id="storedDomainEventRepository" class="com.degloba.domain.event.StoredDomainEventRepository">
		<property name="mongoTemplate" ref="mongoTemplate"/>
		<constructor-arg name="mongoTemplate" ref="mongoTemplate"/> 
	</bean>   --> 


<!-- 	<bean id="domainEventBus"
		class="com.degloba.domain.events.DomainEventBus">
		<constructor-arg name="eventBus" ref="eventBus" />
		<constructor-arg name="storedDomainEventRepository"
			ref="storedDomainEventRepository" />
	</bean>
 -->

	<!-- ************ -->
	<!-- REPOSITORIS -->
	<!-- ************ -->

	<!-- <bean id="repository" class="com.degloba.persistence.rdbms.api.jpa.EntityRepository" /> -->

	<!-- <bean id="organisationRepository"
		class="com.degloba.organisation.infrastructure.persistence.rdbms.jpa.repositories.OrganisationRepository" />
 -->
	<!-- <bean id="crmRepository"
		class="com.degloba.ecommerce.crm.infrastructure.persistence.rdbms.api.jpa.repositories.CrmRepository" />

	<bean id="clientRepository"
		class="com.degloba.ecommerce.vendes.infrastructure.persistence.rdbms.api.jpa.repositories.VendaRepository" />

	<bean id="shipmentRepository"
		class="com.degloba.ecommerce.enviaments.infrastructure.persistence.rdbms.api.jpa.repositories.EnviamentRepository" />
 -->
	<!-- <bean id="rentRepositoryObjectify"
		class="com.degloba.lloguers.infrastructure.persistence.nosql.googleDatastore.api.objectify.repositories.LloguerRepository" />
 -->

</beans>
